チャットボットバックエンド

1. ローカル開発セットアップ
リポジトリのクローン
  git clone https://github.com/QueueCorpJP/Chatbot-backend.git
  cd Chatbot-backend

Python依存関係のインストール
  python -m venv venv

  # macOS/Linuxの場合
  source venv/bin/activate

  # Windowsの場合
  venv\Scripts\activate

  # 必要な依存関係をインストール
  pip install -r requirements.txt
  playwright install  # 重要

PostgreSQLのインストール
  Ubuntuの場合:
    sudo apt update
    sudo apt install postgresql postgresql-contrib
  macOS (Homebrewを使用):
    brew install postgresql
  Windowsの場合: PostgreSQL公式サイトからPostgreSQLをダウンロードしてインストールします。

PostgreSQLデータベースの設定
  PostgreSQLをインストールした後、データベースとユーザーを作成する必要があります。

.env ファイルの設定
  プロジェクトのルートディレクトリに .env ファイルを作成し、以下の内容を追加します（プレースホルダーを実際の値に置き換えてください）：
  GOOGLE_API_KEY=AI...7I
  COMPANY_NAME="Queue"
  WEBSHAREPROXY_USERNAME=xv...ll
  WEBSHAREPROXY_PASSWORD=t6...rt
  ASSEMBLYAI_API_KEY=12...7b
  DB_NAME=chatbot
  DB_USER=postgres
  DB_PASSWORD=yourpassword
  DB_HOST=localhost
  DB_PORT=5432

FastAPIアプリの実行
  python main.py

サーバーは `http://localhost:8083` で起動します。

2. AWS EC2インスタンスへのデプロイ

初期セットアップ：
  - PostgreSQL のインストール
    sudo yum clean metadata
    sudo yum install -y postgresql15 postgresql15-server
    which postgresql-setup
    sudo postgresql-setup --initdb
    sudo systemctl enable postgresql
    sudo systemctl start postgresql
    sudo systemctl status postgresql
  - データベースとユーザーの作成
    sudo -i -u postgres
    psql -U postgres -W
    // set password
    sudo -i -u postgres
    psql
    \password postgres
  - 認証方式の設定を変更
    sudo nano /var/lib/pgsql/data/pg_hba.conf
    "peer" and "ident" update to "md5"
  - PostgreSQL を再起動
    sudo systemctl restart postgresql

    
  - 最新のコードをプル：git pull origin main
  - 仮想環境の作成：
    python -m venv venv
    source venv/bin/activate
  - 依存パッケージのインストール：pip install -r requirements.txt
  - .env ファイルの作成： 例：
    GOOGLE_API_KEY=AI...7I
    COMPANY_NAME="Queue"
    WEBSHAREPROXY_USERNAME=xv...ll
    WEBSHAREPROXY_PASSWORD=t6...rt
    ASSEMBLYAI_API_KEY=12...7b
    DB_NAME = chatbot
    DB_USER = postgres
    DB_PASSWORD = yourpassword
    DB_HOST = localhost
    DB_PORT = 5432
  - FastAPI アプリの起動：python main.py

リバースプロキシ設定（Nginx）：
  - Nginx をインストール（未インストールの場合）： sudo apt install nginx
  - Nginx の設定を編集：sudo nano /etc/nginx/nginx.conf
  - 以下を追加または修正：
    server {
      ...
      location /chatbot/api/ {
        proxy_pass http://127.0.0.1:8083;  # バックエンドサービス（ポート8083）
        proxy_set_header Host $host;  # オリジナルのHostヘッダーを保持
        proxy_set_header X-Real-IP $remote_addr;  # クライアントのIPアドレス
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # IPチェーンの保持
        proxy_set_header X-Forwarded-Proto $scheme;  # 使用プロトコルの保持
      }
      ...
    }
  - Nginx を再起動：
    sudo systemctl restart nginx

起動手順
  systemd を使用する場合：sudo systemctl start chatbot-backend
  ※サービスが未設定の場合は、別途 chatbot-backend.service を /etc/systemd/system/ に作成してください。

メンテナンス手順
  最新のコードを取得：git pull
  サービスを再起動：sudo systemctl restart chatbot-backend
  ログを確認：journalctl -u chatbot-backend -f



===========================English=======================================

Chatbot Backend 

1. Local Development Setup
Clone the Repository:
  git clone https://github.com/QueueCorpJP/Chatbot-backend.git
  cd Chatbot-backend

Install Python Dependencies:
  python -m venv venv
  # For macOS/Linux
  source venv/bin/activate
  # For Windows
  venv\Scripts\activate
  # Install required dependencies
  pip install -r requirements.txt
  playwright install # important

Install PostgreSQL:
  For Ubuntu: sudo apt update
              sudo apt install postgresql postgresql-contrib
  For macOS (using Homebrew): brew install postgresql
  For Windows: Download and install PostgreSQL from the official PostgreSQL website.

Configure PostgreSQL Database:
  After installing PostgreSQL, you'll need to create a database and user.

Set Up the .env File:
  Create a .env file in the project root directory with the following content (replace the placeholders with your actual values):
  GOOGLE_API_KEY=AI...7I
  COMPANY_NAME="Queue"
  WEBSHAREPROXY_USERNAME=xv...ll
  WEBSHAREPROXY_PASSWORD=t6...rt
  ASSEMBLYAI_API_KEY=12...7b
  DB_NAME=chatbot
  DB_USER=postgres
  DB_PASSWORD=yourpassword
  DB_HOST=localhost
  DB_PORT=5432

Run the FastAPI App:
  python main.py

2. Deploying to AWS EC2 Instance

Initial Setup:
  - Install PostgreSQL:
    sudo yum clean metadata
    sudo yum install -y postgresql15 postgresql15-server
    which postgresql-setup
    sudo postgresql-setup --initdb
    sudo systemctl enable postgresql
    sudo systemctl start postgresql
    sudo systemctl status postgresql
  - Create Database and User
    sudo -i -u postgres
    psql -U postgres -W
    // set password
    sudo -i -u postgres
    psql
    \password postgres
  - Update authorization method
    sudo nano /var/lib/pgsql/data/pg_hba.conf
    "peer" and "ident" update to "md5"
  - Restart PostgreSQL
    sudo systemctl restart postgresql


  - Pull the latest code:
    git pull origin main

  - Create a virtual environment:
    python -m venv venv
    source venv/bin/activate

  - Install dependencies:
    pip install -r requirements.txt
    playwright install

  - Create .env File:
    Example .env file:
    GOOGLE_API_KEY=AI...7I
    COMPANY_NAME="Queue"
    WEBSHAREPROXY_USERNAME=xv...ll
    WEBSHAREPROXY_PASSWORD=t6...rt
    ASSEMBLYAI_API_KEY=12...7b
    DB_NAME = chatbot
    DB_USER = postgres
    DB_PASSWORD = yourpassword
    DB_HOST = localhost
    DB_PORT = 5432

  - Run the FastAPI app:
    python main.py

Reverse Proxy Setup (Nginx):
  - Install Nginx if not already installed.

  - Configure Nginx:
    sudo nano /etc/nginx/nginx.conf

    ...
    server {
      ...
      location /chatbot/api/ {
        proxy_pass http://127.0.0.1:8083;  # Backend service running on port 8083
        proxy_set_header Host $host;  # Preserve original Host header
        proxy_set_header X-Real-IP $remote_addr;  # Real client IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Preserve client IP chain
        proxy_set_header X-Forwarded-Proto $scheme;  # Preserve protocol (HTTP/HTTPS)
      }
      ...
    }

  - Restart Nginx:
    sudo systemctl restart nginx

Startup Procedure
  If using systemd:
  sudo systemctl start chatbot-backend

Maintenance Procedures
  Pull latest changes: git pull
  Restart the service: sudo systemctl restart chatbot-backend
  View backend logs: journalctl -u chatbot-backend -f


