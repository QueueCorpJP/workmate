name: Deploy Frontend

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Test workflow
      run: |
        echo "🚀 フロントエンドGitHub Actionsワークフローが動作しています"
        echo "📂 ワークスペース内容:"
        ls -la
        echo ""
        echo "📁 Chatbot-Frontend-mainディレクトリ確認:"
        if [ -d "Chatbot-Frontend-main" ]; then
          echo "✅ Chatbot-Frontend-mainディレクトリが存在します"
          ls -la Chatbot-Frontend-main/ | head -10
        else
          echo "❌ Chatbot-Frontend-mainディレクトリが見つかりません"
        fi

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
        echo "🔗 SSH接続テスト:"
        ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH接続成功'" || {
          echo "❌ SSH接続に失敗しました"
          exit 1
        }
        echo "✅ SSH接続が成功しました"

    - name: Build frontend
      run: |
        echo "🏗️ フロントエンドビルド開始..."
        cd Chatbot-Frontend-main
        npm install
        npm run build
        
        echo "📦 ビルド内容確認:"
        ls -la dist/
        
        echo "📦 アーカイブ作成..."
        # GitHubワークスペース直下にアーカイブを作成
        tar -czf $GITHUB_WORKSPACE/frontend.tar.gz -C dist .
        
        echo "📦 アーカイブ内容確認:"
        tar -tzf $GITHUB_WORKSPACE/frontend.tar.gz | head -10
        
        echo "✅ ビルド完了"

    - name: Deploy frontend
      run: |
        echo "📤 ファイル転送開始..."
        # ワークスペース直下のファイルを転送
        scp -o ConnectTimeout=30 -o ServerAliveInterval=10 $GITHUB_WORKSPACE/frontend.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
        
        echo "🚀 フロントエンドデプロイ開始..."
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=10 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
          set -e
          
          # パス設定
          DEPLOY_PATH="${{ secrets.EC2_PATH }}"
          
          # Nginxのrootディレクトリを確認・設定
          echo "🔍 Nginx設定確認..."
          NGINX_ROOT=""
          if command -v nginx >/dev/null 2>&1; then
            # Nginx設定からrootディレクトリを取得
            if [ -f /etc/nginx/sites-enabled/default ]; then
              NGINX_ROOT=$(grep -E "^\s*root\s+" /etc/nginx/sites-enabled/default | head -1 | awk '{print $2}' | sed 's/;//')
            elif [ -f /etc/nginx/nginx.conf ]; then
              NGINX_ROOT=$(grep -E "^\s*root\s+" /etc/nginx/nginx.conf | head -1 | awk '{print $2}' | sed 's/;//')
            fi
            
            # デフォルトパスを設定
            if [ -z "$NGINX_ROOT" ]; then
              if [ -d "/usr/share/nginx/html" ]; then
                NGINX_ROOT="/usr/share/nginx/html"
              else
                NGINX_ROOT="/var/www/html"
              fi
            fi
          else
            NGINX_ROOT="/var/www/html"
          fi
          
          echo "📂 パス情報:"
          echo "DEPLOY_PATH: $DEPLOY_PATH"
          echo "NGINX_ROOT: $NGINX_ROOT"
          echo "現在のディレクトリ: $(pwd)"
          
          echo "🗂️ フロントエンドディレクトリ準備..."
          sudo mkdir -p $NGINX_ROOT
          sudo chown $USER:$USER $NGINX_ROOT
          
          echo "🧹 既存ファイルクリーンアップ..."
          sudo rm -rf $NGINX_ROOT/*
          
          echo "📦 ファイル展開..."
          cd $NGINX_ROOT
          tar -xzf /tmp/frontend.tar.gz
          
          # ファイル権限の適切な設定
          sudo chown -R nginx:nginx $NGINX_ROOT 2>/dev/null || sudo chown -R $USER:$USER $NGINX_ROOT
          sudo chmod -R 755 $NGINX_ROOT
          
          echo "📊 配置確認:"
          ls -la $NGINX_ROOT/ | head -20
          
          echo "🔗 シンボリックリンク設定..."
          if [ -d "$DEPLOY_PATH" ]; then
            # 既存のシンボリックリンクを削除
            if [ -L "$DEPLOY_PATH/static" ]; then
              rm -f "$DEPLOY_PATH/static"
            fi
            # バックエンドの静的ファイルディレクトリにシンボリックリンクを作成
            ln -sf $NGINX_ROOT "$DEPLOY_PATH/static"
            echo "シンボリックリンクを作成しました: $DEPLOY_PATH/static -> $NGINX_ROOT"
          fi
          
          echo "🌐 Nginx設定リロード..."
          if command -v nginx >/dev/null 2>&1; then
            echo "Nginxが見つかりました。設定をリロードします..."
            sudo nginx -t && sudo systemctl reload nginx || echo "⚠️ Nginx設定の問題があります"
          else
            echo "⚠️ Nginxが見つかりません"
          fi
          
          # PM2でNode.jsアプリケーションがある場合は再起動
          echo "🔄 Node.jsアプリケーション確認・再起動..."
          if command -v pm2 >/dev/null 2>&1; then
            echo "PM2が見つかりました。Node.jsアプリケーションを確認します..."
            
            # フロントエンド関連のPM2プロセスがあれば再起動
            if pm2 describe workmate-frontend >/dev/null 2>&1; then
              echo "workmate-frontend を再起動します..."
              pm2 restart workmate-frontend
            elif pm2 describe frontend >/dev/null 2>&1; then
              echo "frontend を再起動します..."
              pm2 restart frontend
            else
              echo "フロントエンド用のPM2プロセスは見つかりませんでした（静的配信の場合は正常）"
            fi
            
            # 現在のPM2プロセス一覧を表示
            pm2 list
          else
            echo "PM2が見つかりません（静的配信の場合は正常）"
          fi
          
          echo "🧹 一時ファイル削除..."
          rm -f /tmp/frontend.tar.gz
          
          echo "✅ フロントエンドデプロイ完了"
          echo "📊 最終確認:"
          echo "フロントエンドファイル数: $(find $NGINX_ROOT -type f | wc -l)"
          echo "主要ファイル:"
          ls -la $NGINX_ROOT/index.html $NGINX_ROOT/assets/ 2>/dev/null || echo "主要ファイルが見つかりません"
        ENDSSH
        
        echo "✅ デプロイプロセス完了"

    - name: Clear cache and verify
      run: |
        echo "🧹 キャッシュクリアと検証..."
        ssh -o ConnectTimeout=15 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          echo '🌐 Webサーバープロセス確認:'
          netstat -tlnp | grep -E ':(80|443|3000)' || echo 'Webサーバーが見つかりません'
          echo ''
          echo '📁 静的ファイル確認:'
          if [ -f '/usr/share/nginx/html/index.html' ]; then
            echo 'Nginx標準パス (/usr/share/nginx/html) にindex.htmlが見つかりました'
          elif [ -f '/var/www/html/index.html' ]; then
            echo 'Apache標準パス (/var/www/html) にindex.htmlが見つかりました'
          else
            echo '⚠️ index.htmlが見つかりません'
          fi
          echo ''
          echo '🔧 Nginx設定テスト:'
          if command -v nginx >/dev/null 2>&1; then
            nginx -t || echo '⚠️ Nginx設定にエラーがあります'
          else
            echo 'Nginxが見つかりません'
          fi
        " || echo "⚠️ 検証でいくつかの問題が見つかりました"
        
        echo "💡 キャッシュクリア推奨事項:"
        echo "- ブラウザキャッシュをクリアしてください（Ctrl+F5 または Cmd+Shift+R）"
        echo "- CloudFrontを使用している場合は、Invalidationを実行してください"
        
        echo "✅ フロントエンドデプロイ検証完了"