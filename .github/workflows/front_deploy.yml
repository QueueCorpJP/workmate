name: Deploy Frontend (SPA)

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Build Frontend
      env:
        VITE_API_URL: https://workmatechat.com/chatbot/api
       
      run: |
        echo "🏗️ フロントエンドビルド開始..."
        cd Chatbot-Frontend-main
        
        # 依存関係インストール
        npm ci --audit-level=high
        
        # 環境変数確認
        echo "VITE_API_URL: $VITE_API_URL"
        
        # ビルド実行
        npm run build
        
        echo "📦 ビルド内容確認:"
        ls -la dist/
        
        echo "✅ ビルド完了"

    - name: Deploy to EC2
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
        KEY: ${{ secrets.EC2_KEY }}
      run: |
        echo "🔑 SSH鍵設定..."
        echo "$KEY" > id_rsa && chmod 600 id_rsa
        
        echo "📤 静的ファイルをEC2に同期..."
        BUILD_DIR="Chatbot-Frontend-main/dist/"
        TMP_REMOTE="/tmp/webapp_dist"

        rsync -az --delete -e "ssh -i id_rsa -o StrictHostKeyChecking=no" \
          "$BUILD_DIR" $USER@$HOST:"$TMP_REMOTE" || { echo "❌ rsync 失敗"; exit 1; }

        echo "🔄 アトミック切替とNginx再起動..."
        ssh -i id_rsa -o StrictHostKeyChecking=no $USER@$HOST << 'ENDSSH'
          set -eux
          TMP_REMOTE="/tmp/webapp_dist"
          WEB_ROOT="/var/www/html"
          DEPLOY_DIR="/var/www/html_$(date +%Y%m%d%H%M%S)"

          # 配置先ディレクトリを用意しコピー
          sudo mkdir -p "${DEPLOY_DIR}"
          sudo cp -r "${TMP_REMOTE}"/* "${DEPLOY_DIR}/"

          # 重要ファイル存在チェック
          if ! sudo ls "${DEPLOY_DIR}/static/js/sharedDataService-"*".js" > /dev/null 2>&1; then
            echo "❌ 必須チャンク(sharedDataService)が見つかりません。ロールバックします";
            exit 1;
          fi

          # 旧ディレクトリをバックアップしながらアトミックに切替え
          sudo mv "${WEB_ROOT}" "${WEB_ROOT}_backup_$(date +%s)" || true
          sudo mv "${DEPLOY_DIR}" "${WEB_ROOT}"

          # 一時ディレクトリ削除
          sudo rm -rf ${TMP_REMOTE}

          # 古いリリースを最大3世代残して掃除
          sudo ls -dt /var/www/html_* | tail -n +4 | xargs -r sudo rm -rf || true

          # 権限設定
          sudo chown -R nginx:nginx "${DEPLOY_DIR}" || sudo chown -R www-data:www-data "${DEPLOY_DIR}"
          sudo chmod -R 755 "${DEPLOY_DIR}"

          # Nginxリロード
          sudo nginx -t && sudo systemctl reload nginx
           
          echo "✅ デプロイ完了"
        ENDSSH
        
        rm -f id_rsa

    - name: Verify deployment
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
        KEY: ${{ secrets.EC2_KEY }}
      run: |
        echo "🔍 デプロイ検証..."
        echo "$KEY" > id_rsa && chmod 600 id_rsa
        
        ssh -i id_rsa -o StrictHostKeyChecking=no $USER@$HOST "
          echo '📁 静的ファイル確認:'
          ls -la /var/www/html/index.html || echo '⚠️ index.htmlが見つかりません'
          echo '🌐 Nginx状態確認:'
          sudo nginx -t || echo '⚠️ Nginx設定エラー'
        "
        
        rm -f id_rsa
        echo "✅ 検証完了"