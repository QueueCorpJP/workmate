name: Deploy Backend to AWS EC2

on:
  push:
    branches:
      - master
    paths:
      - 'Chatbot-backend-main/**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy Backend to AWS EC2
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            
            echo "üöÄ Starting backend deployment..."
            
            # Navigate to application directory
            cd ${{ secrets.APP_DIRECTORY }}
            
            # Pull latest changes from master branch
            echo "üì• Pulling latest changes..."
            git fetch origin
            git reset --hard origin/master
            
            # Navigate to backend directory
            echo "üîß Setting up backend..."
            cd Chatbot-backend-main
            
            # Create .env file with secrets
            echo "üìù Creating environment configuration..."
            cat > .env << 'ENV_EOF'
          GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          COMPANY_NAME=${{ secrets.COMPANY_NAME }}
          PORT=${{ secrets.PORT }}
          ENV_EOF
            
            # Create virtual environment if it doesn't exist
            if [ ! -d "venv" ]; then
              echo "üêç Creating Python virtual environment..."
              python3 -m venv venv
            fi
            
            # Activate virtual environment and install dependencies
            echo "üì¶ Installing Python dependencies..."
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            
            # Stop existing backend process
            echo "‚èπÔ∏è Stopping existing backend..."
            if pgrep -f "python.*main.py" > /dev/null; then
              pkill -f "python.*main.py" || true
              sleep 3
            fi
            
            # Kill process using port if exists
            if lsof -ti:${{ secrets.PORT }} > /dev/null 2>&1; then
              echo "üî™ Killing process on port ${{ secrets.PORT }}..."
              kill -9 $(lsof -ti:${{ secrets.PORT }}) || true
              sleep 2
            fi
            
            # Start backend in background
            echo "‚ñ∂Ô∏è Starting backend server..."
            source venv/bin/activate
            nohup python main.py > backend.log 2>&1 &
            echo $! > backend.pid
            
            # Wait a moment for backend to start
            sleep 10
            
            # Check if backend is running
            if ps -p $(cat backend.pid) > /dev/null 2>&1; then
              echo "‚úÖ Backend started successfully (PID: $(cat backend.pid))"
              
              # Test backend health
              if curl -f -s http://localhost:${{ secrets.PORT }}/health > /dev/null 2>&1; then
                echo "‚úÖ Backend health check passed"
              else
                echo "‚ö†Ô∏è Backend health check failed, but process is running"
              fi
            else
              echo "‚ùå Backend failed to start"
              echo "üìã Last 20 lines of backend log:"
              tail -20 backend.log
              exit 1
            fi
            
            echo "üéâ Backend deployment completed successfully!"
          EOF

      - name: Verify Backend Deployment
        run: |
          echo "üîç Verifying backend deployment..."
          
          # Wait for service to stabilize
          sleep 15
          
          # Check if backend is accessible
          if curl -f -s "http://${{ secrets.EC2_HOST }}:${{ secrets.PORT }}/health" > /dev/null 2>&1; then
            echo "‚úÖ Backend is accessible from external network"
          else
            echo "‚ö†Ô∏è Backend external health check failed (may be behind firewall)"
          fi

      - name: Deployment Notification
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Backend deployment to AWS EC2 completed successfully!"
            echo "üåê Backend should be running at: http://${{ secrets.EC2_HOST }}:${{ secrets.PORT }}"
          else
            echo "‚ùå Backend deployment to AWS EC2 failed!"
            exit 1
          fi