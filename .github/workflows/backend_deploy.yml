name: Deploy Backend

on:
  push:
    paths:
      - 'Chatbot-backend-main/**'
      - 'Chatbot-backend-master/**'
    branches:
      - main
      - master

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Debug connection info
      run: |
        echo "🔍 デバッグ情報:"
        echo "EC2_HOST: ${{ secrets.EC2_HOST }}"
        echo "EC2_USER: ${{ secrets.EC2_USER }}"
        echo "EC2_PATH: ${{ secrets.EC2_PATH }}"
        echo ""
        echo "🌐 ホスト接続性テスト:"
        ping -c 3 ${{ secrets.EC2_HOST }} || echo "❌ ホストにpingが届きません"

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        echo "🔑 SSH鍵の確認:"
        ls -la ~/.ssh/id_rsa
        echo ""
        
        echo "🔗 SSH接続テスト:"
        ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH接続成功'" || {
          echo "❌ SSH接続に失敗しました"
          exit 1
        }
        
        echo "✅ SSH接続が成功しました"
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy backend
      run: |
        echo "📤 ファイル転送開始..."
        echo "🔍 転送詳細:"
        echo "ソース: Chatbot-backend-main"
        echo "宛先: ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_PATH }}/"
        
        echo "🔗 最終SSH接続確認:"
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH接続OK'"
        
        echo "📂 転送対象ファイル確認:"
        ls -la Chatbot-backend-main/ | head -20
        
        echo "📊 ファイルサイズ統計:"
        du -sh Chatbot-backend-main/
        find Chatbot-backend-main/ -type f -size +5M | head -5 || echo "5MB以上のファイルはありません"
        
        echo "🧹 大きなファイル・不要ファイルの除去:"
        echo "5MB以上のファイル:"
        find Chatbot-backend-main/ -type f -size +5M || echo "なし"
        
        echo "🧹 クリーンアップ後のサイズ:"
        du -sh Chatbot-backend-main/
        
        echo "🚀 最初にtar.gz方式で転送を試行:"
        echo "📦 ファイルをtar圧縮:"
        tar --exclude='node_modules' --exclude='__pycache__' --exclude='*.pyc' --exclude='.git' -czf backend.tar.gz -C Chatbot-backend-main .
        ls -lh backend.tar.gz
        
        echo "🚀 SSH経由でtar転送 + 展開（タイムアウト: 600秒）:"
        timeout 600 ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "cd ${{ secrets.EC2_PATH }} && rm -rf Chatbot-backend-main.old && if [ -d Chatbot-backend-main ]; then mv Chatbot-backend-main Chatbot-backend-main.old; fi && mkdir -p Chatbot-backend-main" || {
          echo "❌ リモートディレクトリ準備でタイムアウトまたはエラー"
          exit 1
        }
        
        timeout 600 scp -o ConnectTimeout=60 -o ServerAliveInterval=30 backend.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_PATH }}/backend.tar.gz || {
          echo "❌ ファイル転送でタイムアウトまたはエラー"
          exit 1
        }
        
        timeout 600 ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "cd ${{ secrets.EC2_PATH }} && tar -xzf backend.tar.gz -C Chatbot-backend-main && rm backend.tar.gz && echo 'ファイル展開完了'" || {
          echo "❌ ファイル展開でタイムアウトまたはエラー"
          exit 1
        }
        
        echo "✅ ファイル展開完了"
        echo "✅ tar.gz方式での転送完了"
        
        echo "🔍 転送後確認:"
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "ls -la ${{ secrets.EC2_PATH }}/Chatbot-backend-main/ | head -20"

    - name: Setup backend environment
      run: |
        echo "🚀 バックエンド環境セットアップ開始..."
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "cd ${{ secrets.EC2_PATH }}/Chatbot-backend-main && python3 -m venv venv && source venv/bin/activate && pip install --upgrade pip"
        
    - name: Install backend dependencies  
      run: |
        echo "📦 バックエンド依存関係インストール..."
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "cd ${{ secrets.EC2_PATH }}/Chatbot-backend-main && source venv/bin/activate && sed -i 's/psycopg2==2.9.10/psycopg2-binary==2.9.10/g' requirements.txt && pip install -r requirements.txt"

    - name: Setup PM2 and static files
      run: |
        echo "🔧 PM2とファイル設定..."
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "command -v pm2 >/dev/null 2>&1 || npm install -g pm2"
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "cd ${{ secrets.EC2_PATH }}/Chatbot-backend-main && if [ -d /var/www/html ] && [ \"\$(ls -A /var/www/html)\" ]; then ln -sf /var/www/html static; fi"

    - name: Stop existing processes
      run: |
        echo "⏹️ 既存プロセス停止..."
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "pkill -f main.py || true; pkill -f uvicorn || true; pm2 stop chatbot-backend || true; pm2 delete chatbot-backend || true; sleep 2"

    - name: Create PM2 configuration
      run: |
        echo "🔧 PM2設定ファイル作成..."
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "cd ${{ secrets.EC2_PATH }}/Chatbot-backend-main && mkdir -p logs"
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "cd ${{ secrets.EC2_PATH }}/Chatbot-backend-main && cat > ecosystem.config.js << 'EOF'
        module.exports = {
          apps: [{
            name: 'chatbot-backend',
            script: 'main.py',
            interpreter: './venv/bin/python3',
            cwd: process.cwd(),
            instances: 1,
            autorestart: true,
            watch: false,
            max_memory_restart: '1G',
            env: {
              NODE_ENV: 'production'
            },
            log_file: './logs/app.log',
            out_file: './logs/out.log',
            error_file: './logs/error.log',
            time: true
          }]
        }
        EOF"

    - name: Start backend with PM2
      run: |
        echo "▶️ PM2でバックエンド起動..."
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "cd ${{ secrets.EC2_PATH }}/Chatbot-backend-main && pm2 start ecosystem.config.js && sleep 5"
        
        echo "📊 プロセス確認:"
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "pm2 list"
        
        echo "🔍 ログ確認:"
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "cd ${{ secrets.EC2_PATH }}/Chatbot-backend-main && if [ -f logs/out.log ]; then tail -10 logs/out.log; else echo 'ログファイルが見つかりません'; fi"
        
        echo "🌐 ポート確認:"
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "netstat -tlnp | grep :8083 || echo 'ポート8083でリスニングしているプロセスなし'"
        
        echo "💾 PM2設定保存..."
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "pm2 save && pm2 startup || true"
        
        echo "✅ デプロイプロセス完了"