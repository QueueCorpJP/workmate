name: Deploy Backend

on:
  push:
    paths:
      - 'Chatbot-backend-main/**'
      - 'Chatbot-backend-master/**'
    branches:
      - main
      - master

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Debug connection info
      run: |
        echo "🔍 デバッグ情報:"
        echo "EC2_HOST: ${{ secrets.EC2_HOST }}"
        echo "EC2_USER: ${{ secrets.EC2_USER }}"
        echo "EC2_PATH: ${{ secrets.EC2_PATH }}"
        echo ""
        echo "🌐 ホスト接続性テスト:"
        ping -c 3 ${{ secrets.EC2_HOST }} || echo "❌ ホストにpingが届きません"

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        echo "🔑 SSH鍵の確認:"
        ls -la ~/.ssh/id_rsa
        echo ""
        
        echo "🔗 SSH接続テスト:"
        ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH接続成功'" || {
          echo "❌ SSH接続に失敗しました"
          echo "🔍 ネットワーク診断:"
          nmap -p 22 ${{ secrets.EC2_HOST }} || echo "nmapが利用できません"
          exit 1
        }
        
        echo "✅ SSH接続が成功しました"
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy backend
      run: |
        echo "📤 ファイル転送開始..."
        echo "🔍 転送詳細:"
        echo "ソース: Chatbot-backend-main"
        echo "宛先: ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_PATH }}/"
        
        echo "🔗 最終SSH接続確認:"
        ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH接続OK'" || {
          echo "❌ SSH接続に失敗しました"
          exit 1
        }
        
        echo "📂 転送対象ファイル確認:"
        ls -la Chatbot-backend-main/ | head -10
        echo "📊 ファイルサイズ統計:"
        du -sh Chatbot-backend-main/
        find Chatbot-backend-main/ -type f -size +1M | head -5
        
        echo "🧹 大きなファイル・不要ファイルの除去:"
        # 大きなファイル（5MB以上）をチェック
        echo "5MB以上のファイル:"
        find Chatbot-backend-main/ -type f -size +5M || echo "大きなファイルなし"
        
        # ログファイル、一時ファイル、キャッシュを削除
        find Chatbot-backend-main/ -name "*.log" -delete || true
        find Chatbot-backend-main/ -name "*.pid" -delete || true
        find Chatbot-backend-main/ -name "__pycache__" -type d -exec rm -rf {} + || true
        find Chatbot-backend-main/ -name "*.pyc" -delete || true
        find Chatbot-backend-main/ -name ".DS_Store" -delete || true
        find Chatbot-backend-main/ -name "nohup.out" -delete || true
        
        echo "🧹 クリーンアップ後のサイズ:"
        du -sh Chatbot-backend-main/
        
        echo "🚀 最初にtar.gz方式で転送を試行:"
        {
          echo "📦 ファイルをtar圧縮:"
          tar -czf backend.tar.gz Chatbot-backend-main/
          ls -lh backend.tar.gz
          
          echo "🚀 SSH経由でtar転送 + 展開（タイムアウト: 600秒）:"
          timeout 600 bash -c "cat backend.tar.gz | ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'cd ${{ secrets.EC2_PATH }} && rm -rf Chatbot-backend-main.bak && mv Chatbot-backend-main Chatbot-backend-main.bak 2>/dev/null || true && tar -xzf - && echo \"✅ ファイル展開完了\"'"
          
          echo "✅ tar.gz方式での転送完了"
          
        } || {
          echo "❌ tar.gz転送に失敗、rsyncにフォールバック:"
          
          echo "🔄 rsync転送を試行（タイムアウト: 600秒）:"
          timeout 600 rsync -avz -e "ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa" --progress --partial --inplace Chatbot-backend-main/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_PATH }}/Chatbot-backend-main/ || {
            echo "❌ rsync転送も失敗、SCP方式を最後に試行:"
            
            echo "🔄 SCP分割転送（小さなファイルから）:"
            # 設定ファイルなど重要な小さなファイルを先に転送
            scp -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa Chatbot-backend-main/*.py Chatbot-backend-main/requirements.txt ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_PATH }}/Chatbot-backend-main/ || echo "小ファイル転送失敗"
            
            # ディレクトリ構造を作成
            ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "cd ${{ secrets.EC2_PATH }}/Chatbot-backend-main && mkdir -p modules static"
            
            # modulesディレクトリを転送
            timeout 300 scp -o ConnectTimeout=30 -o StrictHostKeyChecking=no -r -i ~/.ssh/id_rsa Chatbot-backend-main/modules/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_PATH }}/Chatbot-backend-main/ || echo "modules転送失敗"
            
            echo "⚠️ 分割転送完了（一部失敗の可能性）"
          }
        }
        
        echo "🔍 転送後確認:"
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "ls -la ${{ secrets.EC2_PATH }}/Chatbot-backend-main/"
        
        echo "🚀 バックエンドデプロイ開始..."
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=10 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
          set -e
          
          # パス設定
          DEPLOY_PATH="${{ secrets.EC2_PATH }}/Chatbot-backend-main"
          
          echo "📂 現在のディレクトリ: $DEPLOY_PATH"
          cd "$DEPLOY_PATH"
          
          echo "🐍 Python仮想環境セットアップ..."
          python3 -m venv venv
          source venv/bin/activate
          
          echo "🔧 pip更新..."
          pip install --upgrade pip
          
          echo "📦 依存関係インストール..."
          # psycopg2-binaryを使用してコンパイルエラーを回避
          sed -i 's/psycopg2==2.9.10/psycopg2-binary==2.9.10/g' requirements.txt
          
          # PostgreSQL開発ツールがない場合のフォールバック
          if ! pip install -r requirements.txt; then
            echo "⚠️ requirements.txtでのインストールに失敗。個別インストールを試行..."
            pip install fastapi==0.109.2
            pip install uvicorn==0.27.1
            pip install python-multipart==0.0.9
            pip install google-generativeai==0.3.2
            pip install pandas==2.2.0
            pip install openpyxl==3.1.2
            pip install python-dotenv==1.0.1
            pip install PyPDF2==3.0.1
            pip install pymupdf==1.23.7
            pip install pillow==10.2.0
            pip install pdf2image==1.16.3
            pip install requests==2.31.0
            pip install beautifulsoup4==4.12.2
            pip install aiofiles==24.1.0
            pip install asyncpg==0.30.0
            pip install psycopg2-binary==2.9.10
          fi
          
          echo "🔧 PM2のインストール確認..."
          if ! command -v pm2 >/dev/null 2>&1; then
            echo "PM2をインストール中..."
            npm install -g pm2
          else
            echo "PM2は既にインストール済みです"
          fi
          
          echo "⏹️ 既存プロセス停止..."
          # 従来のプロセスを停止
          pkill -f "main.py" || echo "mainプロセス停止対象なし"
          pkill -f "uvicorn" || echo "uvicornプロセス停止対象なし"
          
          # PM2プロセスを停止
          pm2 stop chatbot-backend || echo "PM2プロセス停止対象なし"
          pm2 delete chatbot-backend || echo "PM2プロセス削除対象なし"
          
          sleep 2
          
          echo "🔗 静的ファイル連携確認..."
          if [ -L "static" ]; then
            echo "シンボリックリンク確認: static -> $(readlink static)"
            if [ -d "$(readlink static)" ]; then
              echo "✅ 静的ファイルディレクトリが存在します"
              ls -la "$(readlink static)" | head -5
            else
              echo "⚠️ 静的ファイルディレクトリが見つかりません"
            fi
          else
            echo "⚠️ 静的ファイルのシンボリックリンクがありません"
            echo "🔍 /var/www/html の確認:"
            ls -la /var/www/html/ || echo "フロントエンドファイルが見つかりません"
            
            if [ -d "/var/www/html" ] && [ "$(ls -A /var/www/html)" ]; then
              echo "🔗 シンボリックリンクを作成..."
              ln -sf /var/www/html static
              echo "シンボリックリンクを作成しました: static -> /var/www/html"
            fi
          fi
          
          echo "🔧 PM2設定ファイル作成..."
          cat > ecosystem.config.js << 'EOF'
module.exports = {
  apps: [{
    name: 'chatbot-backend',
    script: 'main.py',
    interpreter: './venv/bin/python3',
    cwd: '${DEPLOY_PATH}',
    instances: 1,
    autorestart: true,
    watch: false,
    max_memory_restart: '1G',
    env: {
      NODE_ENV: 'production'
    },
    log_file: './logs/app.log',
    out_file: './logs/out.log',
    error_file: './logs/error.log',
    time: true
  }]

EOF

          echo "📁 ログディレクトリ作成..."
          mkdir -p logs
          
          echo "▶️ PM2でバックエンド起動..."
          pm2 start ecosystem.config.js
          
          echo "⏰ 起動待機..."
          sleep 5
          
          echo "✅ バックエンドデプロイ完了"
          echo "📊 PM2プロセス確認:"
          pm2 list
          
          echo "🔍 ログ確認:"
          if [ -f logs/out.log ]; then
            echo "最新ログ（最後の10行）:"
            tail -10 logs/out.log
          else
            echo "ログファイルが見つかりません"
          fi
          
          echo "🌐 ポート確認:"
          netstat -tlnp | grep :8083 || echo "ポート8083でリスニングしているプロセスなし"
          
          echo "💾 PM2設定保存..."
          pm2 save
          pm2 startup || echo "PM2スタートアップ設定済み"
          
        ENDSSH
        
        echo "✅ デプロイプロセス完了"