name: Deploy Backend

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Free up disk space
      run: |
        echo "🧹 ディスクスペースを確保しています..."
        echo "初期のディスク使用状況:"
        df -h
        
        # 不要なツールとキャッシュを削除
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/local/share/chromium
        sudo rm -rf /usr/share/swift
        
        # Dockerイメージのクリーンアップ
        docker rmi $(docker image ls -q) || true
        
        # APTキャッシュのクリーンアップ
        sudo apt-get clean
        sudo apt-get autoremove -y
        
        echo "クリーンアップ後のディスク使用状況:"
        df -h
        
    - name: Checkout
      uses: actions/checkout@v3

    # ------------- 新ステップ: SSH設定 -------------
    - name: Setup SSH
      run: |
        echo "🔑 SSH設定開始..."
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" | tr -d '\r' | sed 's/\\n/\n/g' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
        echo "🔗 SSH接続テスト:"
        ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH接続成功'" || { echo "❌ SSH接続に失敗しました"; exit 1; }
        echo "✅ SSH接続が成功しました"

    # ------------- 新ステップ: リモートディレクトリ作成 -------------
    - name: Create remote deployment directory
      run: |
        echo "📂 リモートデプロイディレクトリを作成しています..."
        REMOTE_BASE="/home/${{ secrets.EC2_USER }}/workmate"
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p $REMOTE_BASE/Chatbot-backend-main"
        echo "✅ リモートデプロイディレクトリ作成完了"

    # ------------- 新ステップ: 差分アップロード (ネイティブ scp) -------------
    - name: Copy backend source to EC2 (native scp)
      run: |
        echo "📤 scp で差分アップロード開始..."
        REMOTE_BASE="/home/${{ secrets.EC2_USER }}/workmate"
        scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r \
            Chatbot-backend-main/* \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:$REMOTE_BASE/Chatbot-backend-main/ || { echo "❌ scp アップロードに失敗しました"; exit 1; }
        echo "✅ scp アップロード完了"

    - name: Test workflow and clean up
      run: |
        echo "🚀 GitHub Actionsワークフローが動作しています"
        echo "📂 ワークスペース内容:"
        ls -la
        echo ""
        echo "📁 Chatbot-backend-mainディレクトリ確認:"
        if [ -d "Chatbot-backend-main" ]; then
          echo "✅ Chatbot-backend-mainディレクトリが存在します"
          ls -la Chatbot-backend-main/
        else
          echo "❌ Chatbot-backend-mainディレクトリが見つかりません"
        fi
        
        echo "🧹 不要なディレクトリを削除してディスクスペースを確保..."
        # フロントエンドディレクトリを削除（バックエンドデプロイには不要）
        rm -rf Chatbot-Frontend-main/
        rm -rf src/
        rm -rf public/
        rm -rf scripts/
        rm -rf supabase/
        
        echo "最終的なディスク使用状況:"
        df -h

    # ------------- 旧ステップ削除: Prepare backend files -------------

    # ------------- 旧ステップ削除: Deploy backend (tar 展開) -------------

    # ------------- 新ステップ: 依存関係インストール＆再起動 -------------
    - name: Remote install & restart backend
      run: |
        echo "🚀 リモートインストールとバックエンド再起動開始..."
        REMOTE_BASE="/home/${{ secrets.EC2_USER }}/workmate"
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          DEPLOY_PATH="$REMOTE_BASE/Chatbot-backend-main"
          echo "[Deploy] cd $DEPLOY_PATH"
          cd $DEPLOY_PATH || { echo "ディレクトリが存在しません"; exit 1; }
          source /opt/workmate-venv/bin/activate
          echo "[Deploy] pip install -r requirements.txt --upgrade --quiet"
          pip install -r requirements.txt --upgrade --quiet
          echo "[Deploy] restart workmate.service"
          sudo systemctl restart workmate.service
        EOF
        echo "✅ リモートインストールとバックエンド再起動完了"

    - name: Verify deployment
      run: |
        echo "🔍 デプロイ検証..."
        ssh -o ConnectTimeout=15 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          echo '🌐 サーバープロセス確認:'
          ps aux | grep -E '(python|main\.py)' | grep -v grep || echo 'Pythonプロセスが見つかりません'
          echo ''
          echo '🔧 PM2プロセス確認:'
          if command -v pm2 >/dev/null 2>&1; then
            pm2 list
          else
            echo 'PM2が見つかりません'
          fi
          echo ''
          echo '🚀 実行中のWebサーバー:'
          netstat -tlnp | grep -E ':(8083|8000|3000)' || echo 'バックエンドサーバーが見つかりません'
        " || echo "⚠️ 検証でいくつかの問題が見つかりました"
        
        echo "✅ デプロイ検証完了"