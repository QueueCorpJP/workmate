name: Deploy Backend

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Test workflow
      run: |
        echo "🚀 GitHub Actionsワークフローが動作しています"
        echo "📂 ワークスペース内容:"
        ls -la
        echo ""
        echo "📁 Chatbot-backend-mainディレクトリ確認:"
        if [ -d "Chatbot-backend-main" ]; then
          echo "✅ Chatbot-backend-mainディレクトリが存在します"
          ls -la Chatbot-backend-main/
        else
          echo "❌ Chatbot-backend-mainディレクトリが見つかりません"
        fi

    - name: Setup SSH
      run: |
        echo "🔑 SSH設定開始..."
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
        echo "🔗 SSH接続テスト:"
        ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH接続成功'" || {
          echo "❌ SSH接続に失敗しました"
          exit 1
        }
        echo "✅ SSH接続が成功しました"

    - name: Prepare backend files
      run: |
        echo "📦 バックエンドファイル準備..."
        cd Chatbot-backend-main
        
        # 不要なファイルを除外してアーカイブ作成
        tar --exclude='.git' --exclude='__pycache__' --exclude='*.pyc' --exclude='.env' \
            -czf ../backend.tar.gz .
        
        echo "📦 アーカイブ内容確認:"
        tar -tzf ../backend.tar.gz | head -20
        
        echo "✅ ファイル準備完了"

    - name: Deploy backend
      run: |
        echo "📤 バックエンドファイル転送開始..."
        
        # アーカイブをサーバーに転送
        scp -o ConnectTimeout=30 -o ServerAliveInterval=10 backend.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
        
        echo "🚀 バックエンドデプロイ実行..."
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=10 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
          set -e
          
          # パス設定
          DEPLOY_PATH="${{ secrets.EC2_PATH }}"
          
          echo "📂 デプロイパス: $DEPLOY_PATH"
          echo "👤 現在のユーザー: $(whoami)"
          echo "📂 現在のディレクトリ: $(pwd)"
          
          # デプロイディレクトリ準備
          echo "🗂️ デプロイディレクトリ準備..."
          mkdir -p $DEPLOY_PATH
          cd $DEPLOY_PATH
          
          # 既存ファイルのバックアップ
          echo "💾 既存ファイルバックアップ..."
          if [ -f ".env" ]; then
            cp .env .env.backup
            echo "環境ファイルをバックアップしました"
          fi
          
          # 新しいファイルを展開
          echo "📦 ファイル展開..."
          tar -xzf /tmp/backend.tar.gz
          
          # 環境ファイル復元
          if [ -f ".env.backup" ]; then
            mv .env.backup .env
            echo "環境ファイルを復元しました"
          fi
          
          # Pythonパッケージインストール
          echo "📥 依存関係インストール..."
          if [ -f "requirements.txt" ]; then
            # 仮想環境がある場合は利用
            if [ -d "venv" ]; then
              source venv/bin/activate
            fi
            pip install -r requirements.txt
            echo "Pythonパッケージインストール完了"
          else
            echo "requirements.txtが見つかりません"
          fi
          
          # PM2でアプリケーション再起動
          echo "🔄 アプリケーション再起動..."
          if command -v pm2 >/dev/null 2>&1; then
            # PM2プロセス確認
            pm2 list
            
            # アプリケーション名を確認して再起動
            if pm2 describe workmate-backend >/dev/null 2>&1; then
              echo "workmate-backend を再起動します..."
              pm2 restart workmate-backend
            elif pm2 describe app >/dev/null 2>&1; then
              echo "app を再起動します..."
              pm2 restart app
            else
              echo "新しいPM2プロセスを開始します..."
              pm2 start main.py --name workmate-backend
            fi
            
            # PM2プロセス状態確認
            pm2 list
            pm2 save
          else
            echo "PM2が見つかりません。直接Pythonで起動を試行します..."
            nohup python main.py > app.log 2>&1 &
          fi
          
          echo "📊 デプロイ結果確認:"
          ls -la $DEPLOY_PATH/ | head -20
          
          echo "🧹 一時ファイル削除..."
          rm -f /tmp/backend.tar.gz
          
          echo "✅ バックエンドデプロイ完了"
        ENDSSH
        
        echo "✅ デプロイプロセス完了"

    - name: Verify deployment
      run: |
        echo "🔍 デプロイ検証..."
        ssh -o ConnectTimeout=15 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          echo '🌐 サーバープロセス確認:'
          ps aux | grep -E '(python|main\.py)' | grep -v grep || echo 'Pythonプロセスが見つかりません'
          echo ''
          echo '🔧 PM2プロセス確認:'
          if command -v pm2 >/dev/null 2>&1; then
            pm2 list
          else
            echo 'PM2が見つかりません'
          fi
          echo ''
          echo '🚀 実行中のWebサーバー:'
          netstat -tlnp | grep -E ':(8083|8000|3000)' || echo 'バックエンドサーバーが見つかりません'
        " || echo "⚠️ 検証でいくつかの問題が見つかりました"
        
        echo "✅ デプロイ検証完了"