name: Deploy Backend

on:
  push:
    paths:
      - 'Chatbot-backend-main/**'
      - 'Chatbot-backend-master/**'
    branches:
      - main
      - master

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Debug connection info
      run: |
        echo "🔍 デバッグ情報:"
        echo "EC2_HOST: ${{ secrets.EC2_HOST }}"
        echo "EC2_USER: ${{ secrets.EC2_USER }}"
        echo "EC2_PATH: ${{ secrets.EC2_PATH }}"
        echo ""
        echo "🌐 ホスト接続性テスト:"
        ping -c 3 ${{ secrets.EC2_HOST }} || echo "❌ ホストにpingが届きません"

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        echo "🔑 SSH鍵の確認:"
        ls -la ~/.ssh/id_rsa
        echo ""
        
        echo "🔗 SSH接続テスト:"
        ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH接続成功'" || {
          echo "❌ SSH接続に失敗しました"
          echo "🔍 ネットワーク診断:"
          nmap -p 22 ${{ secrets.EC2_HOST }} || echo "nmapが利用できません"
          exit 1
        }
        
        echo "✅ SSH接続が成功しました"
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy backend
      run: |
        echo "📤 ファイル転送開始..."
        echo "🔍 転送詳細:"
        echo "ソース: Chatbot-backend-main"
        echo "宛先: ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_PATH }}/"
        
        echo "🔗 最終SSH接続確認:"
        ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH接続OK'" || {
          echo "❌ SSH接続に失敗しました"
          exit 1
        }
        
        echo "📂 転送対象ファイル確認:"
        ls -la Chatbot-backend-main/ | head -10
        
        echo "🚀 SCP実行開始（タイムアウト: 300秒）:"
        timeout 300 scp -o ConnectTimeout=30 -o StrictHostKeyChecking=no -r -v Chatbot-backend-main ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_PATH }}/ || {
          echo "❌ SCP転送に失敗しました（タイムアウトまたは接続エラー）"
          echo "🔍 最後のSSH接続テスト:"
          ssh -o ConnectTimeout=5 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH still working'" || echo "SSH接続も失われました"
          exit 1
        }
        
        echo "✅ ファイル転送完了"
        
        echo "🚀 バックエンドデプロイ開始..."
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd ${{ secrets.EC2_PATH }}/Chatbot-backend-main
          echo "📂 現在のディレクトリ: $(pwd)"
          
          echo "🐍 Python仮想環境セットアップ..."
          python3 -m venv venv
          source venv/bin/activate
          
          echo "📦 依存関係インストール..."
          pip install -r requirements.txt
          
          echo "⏹️ 既存プロセス停止..."
          pkill -f main.py || true
          sleep 2
          
          echo "▶️ バックエンド起動..."
          nohup python3 main.py > backend.log 2>&1 &
          echo $! > backend.pid
          
          echo "✅ バックエンドデプロイ完了"
          echo "📊 プロセス確認:"
          ps aux | grep main.py | grep -v grep || echo "プロセスが見つかりません"
        EOF

    - name: Deploy backend (Alternative method if SCP fails)
      if: failure()
      run: |
        echo "🔄 代替方法でファイル転送を試行..."
        
        echo "📦 ファイルをtar圧縮:"
        tar -czf backend.tar.gz Chatbot-backend-main/
        ls -lh backend.tar.gz
        
        echo "🚀 SSH経由でtar転送 + 展開:"
        cat backend.tar.gz | ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "cd ${{ secrets.EC2_PATH }} && rm -rf Chatbot-backend-main.bak && mv Chatbot-backend-main Chatbot-backend-main.bak 2>/dev/null || true && tar -xzf - && echo '✅ ファイル展開完了'"
        
        echo "🚀 バックエンドデプロイ開始..."
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd ${{ secrets.EC2_PATH }}/Chatbot-backend-main
          echo "📂 現在のディレクトリ: $(pwd)"
          
          echo "🐍 Python仮想環境セットアップ..."
          python3 -m venv venv
          source venv/bin/activate
          
          echo "📦 依存関係インストール..."
          pip install -r requirements.txt
          
          echo "⏹️ 既存プロセス停止..."
          pkill -f main.py || true
          sleep 2
          
          echo "▶️ バックエンド起動..."
          nohup python3 main.py > backend.log 2>&1 &
          echo $! > backend.pid
          
          echo "✅ バックエンドデプロイ完了"
          echo "📊 プロセス確認:"
          ps aux | grep main.py | grep -v grep || echo "プロセスが見つかりません"
        EOF