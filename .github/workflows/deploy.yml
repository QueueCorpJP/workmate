name: Deploy Workmate to AWS EC2

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to AWS EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            
            echo "üöÄ Starting deployment..."
            
            # Navigate to application directory
            cd ${{ secrets.APP_DIRECTORY }}
            
            # Pull latest changes from master branch
            echo "üì• Pulling latest changes..."
            git fetch origin
            git reset --hard origin/master
            
            # Backend deployment
            echo "üîß Setting up backend..."
            cd Chatbot-backend-main
            
            # Create virtual environment if it doesn't exist
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            
            # Activate virtual environment and install dependencies
            source venv/bin/activate
            pip install -r requirements.txt
            
            # Stop existing backend process
            if pgrep -f "python.*main.py" > /dev/null; then
              echo "‚èπÔ∏è Stopping existing backend..."
              pkill -f "python.*main.py" || true
              sleep 3
            fi
            
            # Start backend in background
            echo "‚ñ∂Ô∏è Starting backend..."
            nohup python main.py > backend.log 2>&1 &
            echo $! > backend.pid
            
            # Wait a moment for backend to start
            sleep 5
            
            # Check if backend is running
            if ps -p $(cat backend.pid) > /dev/null 2>&1; then
              echo "‚úÖ Backend started successfully"
            else
              echo "‚ùå Backend failed to start"
              cat backend.log
              exit 1
            fi
            
            # Frontend deployment
            echo "üîß Setting up frontend..."
            cd ../Chatbot-Frontend-main
            
            # Install Node.js dependencies
            npm install
            
            # Build frontend
            echo "üèóÔ∏è Building frontend..."
            npm run build
            
            # Copy built files to web server directory (adjust path as needed)
            if [ -d "/var/www/html/workmate" ]; then
              sudo cp -r dist/* /var/www/html/workmate/
              echo "‚úÖ Frontend deployed to web server"
            else
              echo "‚ö†Ô∏è Web server directory not found, skipping file copy"
            fi
            
            # Restart nginx if available
            if command -v nginx &> /dev/null; then
              sudo systemctl reload nginx
              echo "üîÑ Nginx reloaded"
            fi
            
            echo "üéâ Deployment completed successfully!"
          EOF

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          
          # Wait a moment for services to stabilize
          sleep 10
          
          # Check backend health (adjust URL as needed)
          if curl -f -s ${{ secrets.BACKEND_URL }}/health > /dev/null; then
            echo "‚úÖ Backend is responding"
          else
            echo "‚ö†Ô∏è Backend health check failed"
          fi

      - name: Deployment notification
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Workmate deployment to AWS EC2 completed successfully!"
          else
            echo "‚ùå Workmate deployment to AWS EC2 failed!"
            exit 1
          fi