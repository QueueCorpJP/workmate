===============================================================
他のAPIが動作してCSV・プラン履歴が動作しない理由 - 認証権限問題分析
===============================================================

作成日: 2025年1月7日
問題: 他のAPIは正常動作、CSV・プラン履歴のみ本番環境で失敗

===============================================================
1. 技術的な根本原因
===============================================================

【結論】
問題は環境設定ではなく、**認証・権限レベルの違い**にある。

【動作するAPI】✅
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- チャット機能
- ユーザー登録・ログイン
- 基本的な管理機能
- ファイルアップロード

【動作しないAPI】❌
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- CSV エクスポート
- プラン履歴
- ビジネス分析（詳細分析）

===============================================================
2. 認証レベルの違い詳細分析
===============================================================

【動作するAPI - 基本認証】✅
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
バックエンド実装:
@app.post("/chatbot/api/chat")
async def chat_endpoint(current_user=Depends(get_current_user)):

認証要件:
- 基本的なユーザー認証のみ
- role = "employee", "user", "admin" すべて利用可能
- 特別な権限チェックなし

【動作しないAPI - 管理者認証】❌
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ CSVエクスポート
バックエンド実装:
@app.get("/chatbot/api/admin/chat-history/csv")
async def export_csv(current_user=Depends(get_admin_or_user)):

追加認証ロジック (main.py 1060-1061行):
is_admin = current_user["role"] == "admin"
is_special_admin = current_user["email"] in ["queue@queuefood.co.jp", "queue@queue-tech.jp"] and current_user.get("is_special_admin", False)

■ プラン履歴
バックエンド実装:
@app.get("/chatbot/api/plan-history")
async def get_plan_history(current_user=Depends(get_current_user)):

追加認証ロジック (main.py 1032-1033行):
if current_user["role"] in ["admin"] or current_user["email"] in ["queue@queuefood.co.jp", "queue@queue-tech.jp"]:

■ ビジネス分析
バックエンド実装:
@app.post("/chatbot/api/admin/detailed-analysis")
async def detailed_analysis(current_user=Depends(get_admin_or_user)):

===============================================================
3. 本番環境でのユーザー権限状況
===============================================================

【ローカル環境】✅ 開発用設定
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- ユーザーは管理者権限 (role = "admin") を持つ場合が多い
- 特別管理者フラグ (is_special_admin = True) が設定される
- 開発用のメールアドレスが特別管理者リストに含まれる

【本番環境】❌ 一般ユーザー設定
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- ほとんどのユーザーは role = "user" または "employee"
- 特別管理者フラグ (is_special_admin) が設定されていない
- ハードコードされた特別メールアドレス以外はアクセス拒否

【特別管理者メールアドレス（ハードコード）】
- queue@queuefood.co.jp
- queue@queue-tech.jp

===============================================================
4. 具体的な認証失敗パターン
===============================================================

【CSVエクスポート失敗パターン】
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. ユーザーがCSVエクスポートボタンをクリック
2. フロントエンド: api.get('/admin/chat-history/csv')
3. バックエンド: get_admin_or_user() でユーザー確認
4. 権限チェック:
   - current_user["role"] != "admin" ❌
   - current_user["email"] not in 特別リスト ❌
   - current_user.get("is_special_admin", False) = False ❌
5. 結果: アクセス拒否 → 機能が動作しない

【プラン履歴失敗パターン】
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. プラン履歴タブをクリック
2. フロントエンド: api.get("/plan-history")
3. バックエンド: get_current_user() でユーザー確認 ✅
4. 権限チェック:
   - current_user["role"] not in ["admin"] ❌
   - current_user["email"] not in 特別リスト ❌
5. 結果: 空のデータまたはエラー → 表示されない

===============================================================
5. フロントエンド実装の問題点
===============================================================

【ビジネス分析の追加問題】
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ファイル: AnalysisTab.tsx (115行目)

問題のあるコード:
const response = await api.post(`${import.meta.env.VITE_API_URL}/admin/detailed-analysis`, {
  prompt: BUSINESS_ANALYSIS_PROMPT
});

問題:
1. 直接環境変数を使用（axiosインスタンスを使わない）
2. 認証ヘッダーが正しく設定されない可能性
3. 他のAPI呼び出しと一貫性がない

正しい実装:
const response = await api.post('/admin/detailed-analysis', {
  prompt: BUSINESS_ANALYSIS_PROMPT
});

===============================================================
6. 解決方法（優先順位付き）
===============================================================

【解決方法1: バックエンド認証ロジックの修正】🔧 推奨
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ CSVエクスポートの修正
現在: @app.get("/chatbot/api/admin/chat-history/csv", dependencies=[Depends(get_admin_or_user)])
修正: @app.get("/chatbot/api/admin/chat-history/csv", dependencies=[Depends(get_current_user)])

権限チェックを削除または緩和:
# 修正前
is_admin = current_user["role"] == "admin"
is_special_admin = current_user["email"] in ["queue@queuefood.co.jp", "queue@queue-tech.jp"] and current_user.get("is_special_admin", False)

# 修正後（role = "user" も許可）
is_authorized = current_user["role"] in ["admin", "user"] or current_user["email"] in ["queue@queuefood.co.jp", "queue@queue-tech.jp"]

■ プラン履歴の修正
現在の権限チェック:
if current_user["role"] in ["admin"] or current_user["email"] in ["queue@queuefood.co.jp", "queue@queue-tech.jp"]:

修正後:
if current_user["role"] in ["admin", "user"] or current_user["email"] in ["queue@queuefood.co.jp", "queue@queue-tech.jp"]:

【解決方法2: フロントエンド統一】🔧 必要
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
AnalysisTab.tsxの修正:
修正前:
const response = await api.post(`${import.meta.env.VITE_API_URL}/admin/detailed-analysis`, {

修正後:
const response = await api.post('/admin/detailed-analysis', {

【解決方法3: データベースでのユーザー権限更新】🔧 代替案
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
本番環境のユーザーテーブルで:
UPDATE users SET role = 'admin' WHERE role = 'user' AND email IN ('管理者メールアドレス');

または

UPDATE users SET is_special_admin = TRUE WHERE email IN ('管理者メールアドレス');

===============================================================
7. なぜ他のAPIは動作するのか - 詳細説明
===============================================================

【チャット機能】✅ 動作する理由
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- 認証: Depends(get_current_user) のみ
- 権限チェック: なし
- 必要role: employee, user, admin すべてOK
- 実装: シンプルな基本認証のみ

【ファイルアップロード】✅ 動作する理由
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- 認証: Depends(get_current_user) のみ
- 権限チェック: role = "user" または "admin" で十分
- 本番環境のユーザーもrole = "user"を持っている

【ユーザー管理機能】✅ 一部動作する理由
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- 基本的な表示: get_current_user で十分
- 作成・削除: admin権限が必要（これらは動作しない可能性）

【CSV・プラン履歴】❌ 動作しない理由
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- 認証: get_admin_or_user または 厳しい権限チェック
- 権限チェック: admin role または特別メール必須
- 本番ユーザー: これらの条件を満たさない

===============================================================
8. 推奨対応策
===============================================================

【即座に実行すべき修正】⚡
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. バックエンドの権限チェックを緩和
   - role = "user" もCSV・プラン履歴アクセス許可
2. フロントエンドのAPI呼び出し統一
   - AnalysisTab.tsxのURL構築方法を修正

【検証方法】
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. 本番環境で一般ユーザー（role = "user"）でログイン
2. 管理者パネルアクセス
3. CSV・プラン履歴機能をテスト
4. 正常に動作することを確認

【長期的改善】📋
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. 権限管理の体系化
2. role-based access control の見直し
3. 機能別権限設定の導入

===============================================================
まとめ
===============================================================

【問題の本質】
環境設定ではなく、認証・権限レベルの違いが原因。
CSV・プラン履歴は管理者専用として実装されているが、
他のAPIは一般ユーザーでもアクセス可能。

【解決の方針】
バックエンドの権限チェックを緩和し、
role = "user" でもアクセス可能にする。

===============================================================